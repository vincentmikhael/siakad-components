"use client";import {useEffect, useState} from "react";import {UploadSimple, Trash, X} from "@phosphor-icons/react/dist/ssr";import {twMerge} from "tailwind-merge";import {Checkbox, FileIcon, Text} from "@/components";import {useToast} from "@/context/ToastContext";const FileUpload = ({                        className = "",                        label = "Label",                        showLabel = false,                        showHint = false,                        hint,                        error,                        allowDeleted = false,                        name = "",                        value,                        onUploadSuccess,                        onChange,                        type = "image",                        maxWidth = 800,                        maxHeight = 400,                        maxSize = 5,                        sizeUnit = "MB",                        multiple = false,                        ...props                    }) => {    const showToast = useToast();    const [file, setFile] = useState(null);    const [dragging, setDragging] = useState(false);    const [uploading, setUploading] = useState(false);    const [progress, setProgress] = useState(0);    const [failed, setFailed] = useState(false);    const [xhrInstance, setXhrInstance] = useState(null);    const [uploadedFileName, setUploadedFileName] = useState(null);    useEffect(() => {        if (value) {            setFile({name: value.split('/').pop(), url: value});        }    }, [value]);    const description = {        image: `PNG, JPG or JPEG (max. ${maxWidth}x${maxHeight}px)`,        pdf: "PDF (max. 5MB)",        excel: "Excel (max. 5MB)"    }    const getValidTypes = (type) => {        const types = {            image: ["image/jpeg", "image/png"],            pdf: ["application/pdf"],            excel: [                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", // excel .xlsx            ],        };        return types[type]    };    const getValidExtensions = (type) => {        const extensions = {            image: ["jpg", "jpeg", "png"],            pdf: ["pdf"],            excel: ["xlsx"]        };        return extensions[type];    };    const validateFileExtension = (file, type) => {        const validExtensions = getValidExtensions(type);        const fileExtension = file.name.split('.').pop().toLowerCase();        return validExtensions.includes(fileExtension);    };    const sizeUnits = {        B: 1,        KB: 1024,        MB: 1024 * 1024    };    const maxSizeInBytes = maxSize * (sizeUnits[sizeUnit] || sizeUnits.MB);    const handleFileValidation = (file) => {        const validTypes = getValidTypes(type);        const isValidType = validTypes.includes(file.type);        const isValidExtension = validateFileExtension(file, type);        const isValidSize = file.size <= maxSizeInBytes;        if (!isValidType || !isValidExtension) {            showToast("Upload failed!", `Invalid file type`, "danger");            return false;        }        if (!isValidSize) {            showToast("Upload failed!", `File size exceeds the maximum limit of ${maxSize}${sizeUnit}`, "danger");            return false;        }        if (type === "image") {            return new Promise((resolve) => {                const img = new Image();                img.src = URL.createObjectURL(file);                img.onload = () => {                    const {width, height} = img;                    if (width > maxWidth || height > maxHeight) {                        showToast(                            "Upload failed!",                            `Image dimensions should not exceed ${maxWidth}x${maxHeight}px`,                            "danger"                        );                        resolve(false);                    } else {                        resolve(true);                    }                };                img.onerror = () => {                    showToast("Upload failed!", "Invalid image file", "danger");                    resolve(false);                };            });        }        return true;    };    // Fungsi untuk mengunggah file    const uploadFile = async (file) => {        setUploading(true);        setProgress(0);        const formData = new FormData();        formData.set("file", file);        // Gunakan XMLHttpRequest untuk melacak progress        const xhr = new XMLHttpRequest();        xhr.open("POST", "/api/upload-file", true);        setXhrInstance(xhr);        // Event listener untuk mengupdate progress        xhr.upload.onprogress = (event) => {            if (event.lengthComputable) {                const percentComplete = Math.round((event.loaded / event.total) * 100);                setTimeout(() => {                    setProgress(percentComplete);                }, 100);            }        };        xhr.onload = () => {            if (xhr.status === 200) {                const response = JSON.parse(xhr.responseText);                if (response.url) {                    setProgress(100);                    setUploadedFileName(response.url.split('/').pop());                    if (name) {                        onChange({                            target: {                                name,                                value: response.url                            }                        });                    }                    if (onUploadSuccess) {                        onUploadSuccess(response.url);                    }                }            } else {                setFailed(true);                setProgress(0);            }        };        xhr.onerror = () => {            setFailed(true);            setUploading(false);            setProgress(0);        };        xhr.send(formData);    };    //format show size    const formatFileSize = (size) => {        if (size < 1024) {            return `${size} B`;        } else if (size < 1024 * 1024) {            return `${(size / 1024).toFixed(2)} KB`;        } else {            return `${(size / (1024 * 1024)).toFixed(2)} MB`;        }    };    // Handle file drop    const handleDrop = async (e) => {        e.preventDefault();        setDragging(false);        const droppedFiles = e.dataTransfer.files;        if (droppedFiles.length) {            const droppedFile = droppedFiles[0];            const isValid = await handleFileValidation(droppedFile);            if (isValid) {                setFile(droppedFile);                await uploadFile(droppedFile);            } else {                showToast("Upload failed!", "The file must be an image, PDF, or Excel document", "danger");            }        }    };    const handleDragOver = (e) => {        e.preventDefault();        setDragging(true);        e.dataTransfer.dropEffect = "copy";    };    const handleDragLeave = () => {        setDragging(false);    };    const handleFileChange = async (e) => {        const selectedFile = e.target.files[0];        if (selectedFile) {            const isValid = await handleFileValidation(selectedFile);            if (isValid) {                setFile(selectedFile);                await uploadFile(selectedFile);            } else {                showToast("Upload failed!", "The file must be an image, PDF, or Excel document", "danger");            }        }    };    const handleClick = () => {        document.getElementById("fileInput").click();    };    const handleCancelUpload = () => {        if (xhrInstance) {            xhrInstance.abort(); // Hentikan proses unggahan        }        // setFile(null);        setProgress(0);        setUploading(false);        setFailed(false);    }    const handleDeleteFile = async () => {        if (!file) return;        try {            const response = await fetch(`/api/delete-file`, {                method: 'DELETE', headers: {                    'Content-Type': 'application/json',                },                body: JSON.stringify({                    fileName: uploadedFileName                }),            });            if (response.ok) {                showToast("Success!", "File deleted successfully", "success");                setFile(null);                onChange({target: {name, value: ""}});            } else {                showToast("Failed!", "Failed to delete the file", "danger");            }        } catch (error) {            console.error("Error deleting file:", error);            showToast("Error!", "An error occurred while deleting the file", "danger");        }    };    const handleRetry = async () => {        setFailed(false);        await uploadFile(file);    }    const getFileTypeIcon = (fileType) => {        if (fileType.startsWith("image/")) return "image";        if (fileType === "application/pdf") return "pdf";        if (fileType.includes("spreadsheet")) return "excel";        return "file";    };    const hintColorClasses = error ? "text-danger-90" : "text-gray-50";    return (        <div className="flex flex-col gap-1.5 w-full">            {showLabel && (                <label                    className="block text-sm font-medium text-gray-100"                >                    {label}                </label>            )}            <div className={twMerge("w-full flex flex-col gap-4", className)}>                {!file ? (                    <div                        className={`border py-4 px-6 rounded-xl bg-white text-center cursor-pointer ${                            dragging ? "border-primary-90" : error ? "border-danger-90 shadow-[0_0_1px_3px_rgba(255,65,68,0.15)]" : "border-fade"                        }`}                        onDrop={handleDrop}                        onDragOver={handleDragOver}                        onDragLeave={handleDragLeave}                        onClick={handleClick}                    >                        <input                            type="file"                            className="hidden"                            onChange={handleFileChange}                            id="fileInput"                            accept={getValidTypes(type).join(",")}                            {...props}                        />                        <div className="flex flex-col justify-center items-center gap-3">                            <div                                className="p-2.5 border-fade border rounded-lg shadow-[0px_1px_2px_0px_rgba(16,24,40,0.05)]">                                <UploadSimple size={16} weight="bold" color="text-gray-100"/>                            </div>                            <div className="flex flex-col justify-center items-center gap-1.5">                                <div className="inline-block text-primary-100 text-[13px] font-semibold">                                    Click to upload                                    <span className="inline-block text-gray-50 font-normal text-xs ml-1">                                or drag and drop                            </span>                                </div>                                <div className="text-gray-50 text-xs font-normal">                                    {description[type]}                                </div>                            </div>                        </div>                    </div>                ) : (                    <div                        className={`rounded-xl p-4 flex gap-3 items-start ${failed ? 'border-danger-90 border-2' : 'border-fade border'}`}>                        <FileIcon type={getFileTypeIcon(file.type)}/>                        <div className="flex flex-row items-start gap-1 flex-grow">                            <div className="flex flex-col w-full gap-1">                                <div>                                    <p className="text-gray-80 text-sm font-semibold">{file.name}</p>                                    <p className="text-gray-50 text-sm font-normal">                                        {failed ? "Upload failed, please try again" : formatFileSize(file.size)}                                    </p>                                </div>                                {                                    failed ? (                                        <button className="text-primary-100 text-sm font-semibold text-start"                                                onClick={handleRetry}>                                            Try again                                        </button>                                    ) : uploading ? (                                        <div className="flex flex-row gap-3 items-center">                                            <div className="bg-fade h-2 w-full rounded-full">                                                <div                                                    className="bg-primary-100 h-2 rounded-full"                                                    style={{                                                        width: `${progress}%`,                                                        transition: 'width 0.3s ease-in-out'                                                    }}                                                />                                            </div>                                            <p className="text-sm text-gray-80 font-semibold leading-[22.4px]">                                                {progress}%                                            </p>                                        </div>                                    ) : null                                }                            </div>                            {allowDeleted ? (                                <button className="text-gray-50" onClick={handleDeleteFile}>                                    <Trash size={16} weight="bold"/>                                </button>                            ) : progress < 100 ? (                                <button className="text-gray-50" onClick={handleCancelUpload}>                                    <X size={16} weight="bold"/>                                </button>                            ) : (                                <Checkbox checked onChange={() => {                                }}/>                            )                            }                        </div>                    </div>                )}            </div>            {showHint && (error || hint) && (                <Text tag="label" size="sm" weight="400" color={hintColorClasses}>                    {error || hint}                </Text>            )}        </div>    );}export default FileUpload;